from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from .models import Base
import os

# Save the corresponding database to the user root
home_directory = os.path.expanduser("~")
database_path = os.path.join(home_directory, ".pos_inventory.db")
DATABASE_URL = f"sqlite:///{database_path}"

def get_engine():
    """
    Creates and returns the SQLAlchemy engine for the database connection.

    The engine is configured to connect to an SQLite database stored 
    in the user's home directory, under the path ".pos_inventory.db".

    Returns
    -------
    sqlalchemy.engine.base.Engine
        The SQLAlchemy engine object for connecting to the SQLite database.
    """
    return create_engine(DATABASE_URL)

def create_db():
    """
    Creates the database schema.

    This function initializes the database by creating all the tables 
    defined in the `Base` metadata, if they do not already exist.

    It uses the engine generated by `get_engine` to connect to the 
    SQLite database and applies the table definitions.
    """
    engine = get_engine()
    Base.metadata.create_all(engine)

def get_session():
    """
    Creates and returns a new SQLAlchemy session.

    The session is bound to the engine for interacting with the SQLite 
    database. It enables interaction with the database in a transactional 
    manner.

    Returns
    -------
    sqlalchemy.orm.session.Session
        A new session object for querying and modifying the database.
    """
    engine = get_engine()
    Session = sessionmaker(bind=engine)
    return Session()
